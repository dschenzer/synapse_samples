{
	"name": "Device Browser",
	"properties": {
		"content": {
			"query": "\n.create table [bronzeProducts] (ProductID:int,Name:string,ProductNumber:string,Color:string,StandardCost:real,ListPrice:real,Size:string,Weight:string,ProductCategoryID:long,ProductModelID:long,rowguid:guid,ModifiedDate:datetime)\n.create table [bronzeOrders] (SalesOrderID:long,SalesOrderDetailID:long,OrderQty:long,ProductID:int,UnitPrice:real,UnitPriceDiscount:real,LineTotal:real,ModifiedDate:datetime)\n.create table [bronzeClicks] (['date']:datetime,ProductID:int,browser:string,browserVersion:string,ip:string,device:string,source:string)\n\n\n.create table bronzeClicks ingestion json mapping 'bronzeClicks_mapping' '[{\"column\":\"date\", \"Properties\":{\"Path\":\"$[\\'date\\']\"}},{\"column\":\"ProductID\", \"Properties\":{\"Path\":\"$[\\'ProductID\\']\"}},{\"column\":\"browser\", \"Properties\":{\"Path\":\"$[\\'browser\\']\"}},{\"column\":\"browserVersion\", \"Properties\":{\"Path\":\"$[\\'browserVersion\\']\"}},{\"column\":\"ip\", \"Properties\":{\"Path\":\"$[\\'ip\\']\"}},{\"column\":\"device\", \"Properties\":{\"Path\":\"$[\\'device\\']\"}},{\"column\":\"source\", \"Properties\":{\"Path\":\"$[\\'source\\']\"}}]'\n\n\n.create table [silverProducts] (ProductID:int,Name:string,ProductNumber:string,Color:string,StandardCost:real,ListPrice:real,Size:string,Weight:string,ProductCategoryID:long,ProductModelID:long,rowguid:guid,ModifiedDate:datetime,WeightCategory:string)\n.create table [silverOrders] (SalesOrderID:long,SalesOrderDetailID:long,OrderQty:long,ProductID:int,UnitPrice:real,UnitPriceDiscount:real,LineTotal:real,ModifiedDate:datetime, UnitFinalPrice:real, PurchaseDate:datetime)\n.create table [silverClicks] (['date']:datetime,ProductID:int,browser:string,browserVersion:string,ip:string,device:string,source:string)\n\n\n.create function\nwith (docstring = 'Ingest raw products data and calculate product weight category', folder='ingestprojection')\nParseProducts ()\n{\nbronzeProducts\n| extend weightCategory = case(todouble(Weight) <= 100, \"S\", \n                       todouble(Weight) <= 1000 and todouble(Weight) > 100 , \"M\", \n                       todouble(Weight) > 1000, \"L\",\n                       \"U\")\n}\n \n.alter table\nsilverProducts\npolicy update @'[{\"Source\": \"bronzeProducts\", \"Query\": \"ParseProducts\", \"IsEnabled\" : true, \"IsTransactional\": true }]'\n\n\n.create function\nwith (docstring = 'Ingest raw orders data and calculate the final unit price', folder='ingestprojection')\nParseOrders ()\n{\nbronzeOrders\n| extend UnitFinalPrice = round(UnitPrice * (1-UnitPriceDiscount),2)\n| extend PurchaseDate = todatetime(split(ModifiedDate, \" \")[0])\n}\n\n.alter table\nsilverOrders \npolicy update @'[{\"Source\": \"bronzeOrders\", \"Query\": \"ParseOrders\", \"IsEnabled\" : true, \"IsTransactional\": true }]'\n\n\n.create function\nwith (docstring = 'Ingest raw clicks', folder='ingestprojection')\nParseClicks ()\n{\nbronzeClicks\n}\n\n.alter table\nsilverClicks \npolicy update @'[{\"Source\": \"bronzeClicks\", \"Query\": \"ParseClicks\", \"IsEnabled\" : true, \"IsTransactional\": true }]'\n\n\n\n.create materialized-view silverClicksLatest on table silverClicks\n{\n    silverClicks\n    | summarize arg_max(['date'], *) by ProductID\n}\n\nsilverClicksLatest\n| take 100\n\n\n.create materialized-view silverOrdersLatest on table silverOrders\n{\n    silverOrders\n    | summarize arg_max(ModifiedDate, *) by SalesOrderID\n}\n\n\n.create materialized-view silverProductsLatest on table silverProducts\n{\n    silverProducts\n    | summarize arg_max(ModifiedDate, *) by ProductID\n}\n\nbronzeClicks\n| take 10\n\nsilverClicks\n| count \n\nbronzeProducts\n| count \n\nsilverProducts\n| take 10 \n\nsilverOrders\n| join kind=inner silverProducts on $left.ProductID == $right.ProductID\n| summarize DailySales = sum(LineTotal) by PurchaseDate, ProductID, Name\n\n\nsilverClicks\n| join kind=inner silverProducts on $left.ProductID == $right.ProductID\n| summarize DailyClicks = count() by 'date', ProductID, browser, browserVersion, device, source\n\n\n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "taxi",
				"databaseName": "taxi"
			}
		},
		"type": "KqlQuery"
	}
}